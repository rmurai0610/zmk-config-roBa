#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R      &kp T                                                     &kp Y                &kp U    &kp I      &kp O      &kp P
&kp A             &kp S         &kp D         &kp F      &kp G        &mkp MCLK               &kp GRAVE            &kp H                &kp J    &kp K      &kp L      &kp BACKSPACE
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V      &kp B        &lt 3 COMMA             &mt RIGHT_SHIFT DOT  &kp N                &lt 5 M  &mkp LCLK  &mkp RCLK  &lt 2 PERIOD
&kp LCTRL         &kp LEFT_ALT  &kp LEFT_WIN  &lt 2 ESC  &lt 1 SPACE  &mt LEFT_GUI ENTER      &mt RCTRL TAB        &mt RIGHT_ALT SPACE                                 &lt 5 QUESTION
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN    &kp HASH   &kp DOLLAR        &kp PERCENT                                                     &kp CARET         &kp AMPERSAND      &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH        &kp BACKSLASH  &kp PIPE   &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp SEMICOLON  &kp COLON             &trans
&trans           &trans         &kp COMMA  &kp DOT           &kp EQUAL          &kp PLUS                     &kp MINUS       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LESS_THAN  &kp GREATER_THAN      &kp QUESTION
&trans           &trans         &trans     &trans            &trans             &trans                       &trans          &trans                                                                    &kp QUESTION
            >;
        };

        FUNCTION {
            bindings = <
&trans  &kp N7        &kp N8  &kp N9  &trans                            &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9    &kp NUMBER_0  &trans
&kp N0  &kp N4        &kp N5  &kp N6  &kp COMMA  &trans         &trans  &kp PAGE_UP    &mkp MB4      &kp UP_ARROW    &mkp MB5      &trans
&trans  &kp NUMBER_1  &kp N2  &kp N3  &kp DOT    &kp COMMA      &trans  &kp PAGE_DOWN  &kp LEFT      &kp DOWN_ARROW  &kp RIGHT     &trans
&trans  &trans        &trans  &trans  &trans     &trans         &trans  &trans                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans          &trans          &trans       &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &kp PAGE_DOWN   &kp UP_ARROW    &kp PAGE_UP  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT    &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                               &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
